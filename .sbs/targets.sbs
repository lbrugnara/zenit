# The zenit-objects target compiles all the Zenit compiler's source files
compile zenit-objects {
    includes: [
        "../fllib/include"
    ],
    output_dir: "obj/",
    sources: [
        "src/front-end/.*[.]c$",
        "src/zir/.*[.]c$",

        "src/back-end/nes/(opcode|rom|program|generate)[.]c$"
    ]
}

# This target compiles just the file containing the main function, that way we can
# compile the tests project with the zenit-objects dependency without getting main redefined
compile zenit-main {
    includes: [
        "../fllib/include"
    ],
    output_dir: "obj/",
    sources: [
        "src/main.c"
    ]
}

# This target compiles the tests objects
compile zenit-tests-objects {
    includes: [ 
        "../fllib/include"
    ],
    output_dir: "obj/",
    sources: [
        "tests/.*[.]c$"
    ]
}

# This target creates the zenit compiler executable
executable zenit {
    output_name: "zenit",
    output_dir: "build/",
    objects: [
        zenit-objects,
        zenit-main
    ]

    for win-cmd {
        objects: [ "../fllib/build/${SBS_CONFIG_NAME}/libfl.lib" ]
    }

    for linux-bash {
        objects: [ "../fllib/build/${SBS_CONFIG_NAME}/libfl.a" ],
        libraries: [
            { name: "m" },
            { name: "pthread" }
        ]
    }
}

# This target creates an executable for the test suite
executable zenit-tests {
    output_name: "tests",
    output_dir: "build/",
    objects: [
        zenit-objects,
        zenit-tests-objects
    ]

    for win-cmd {
        objects: [ "../fllib/build/${SBS_CONFIG_NAME}/libfl.lib" ]
    }

    for linux-bash {
        objects: [ "../fllib/build/${SBS_CONFIG_NAME}/libfl.a" ],
        libraries: [
            { name: "m" },
            { name: "pthread" }
        ]
    }
}

executable zenit-tests-sanitize {
    output_name: "tests",
    output_dir: "build/",
    objects: [
        zenit-objects,
        zenit-tests-objects
    ]

    for win-cmd {
        objects: [ 
            "../fllib/build/${SBS_CONFIG_NAME}/libfl.lib",
            "clang_rt.ubsan_standalone-i386.lib",
            "clang_rt.asan-i386.lib",
            "clang_rt.builtins-i386.lib",
        ]
        libraries: [
            {
                path: "D:\dev\LLVM\x86\lib\clang\8.0.0\lib\windows"
            }
        ]
    }

    for linux-bash {
        objects: [ "../fllib/build/${SBS_CONFIG_NAME}/libfl.a" ],
        libraries: [
            { name: "m" },
            { name: "pthread" }
        ]
    }
}
